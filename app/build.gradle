apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"
    defaultConfig {
        applicationId "org.usslab.decam"
        minSdkVersion 21
        targetSdkVersion 25
        versionCode getSelfDefinedVersion("code")
        versionName getSelfDefinedVersion("name")
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    buildTypes {
        debug{
            minifyEnabled false
            shrinkResources false
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    String RELEASE = "release"
    String DEBUG = "debug"
//    android.applicationVariants.all { variant ->
//        variant.outputs.each { output ->
//            def outputFile = output.outputFile
//            if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                String buildReleaseDebug = "UnknownRelease"
//                if (variant.buildType.getName().equals(RELEASE)) {
//                    buildReleaseDebug = RELEASE
//                } else {
//                    buildReleaseDebug = DEBUG
//                }
//
//                def fileName = "decam.${defaultConfig.versionName}." + getGitBranch() + "." + buildReleaseDebug + ".apk"
//                output.outputFile = new File(outputFile.parent, fileName)
//            }
//        }
//    }
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            String buildReleaseDebug = "UnknownRelease"
            if (variant.buildType.getName().equals(RELEASE)) {
                buildReleaseDebug = RELEASE
            } else {
                buildReleaseDebug = DEBUG
            }
            outputFileName = "decam.${defaultConfig.versionName}_${getGitBranch()}_${buildReleaseDebug}.apk"
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })


    compile 'com.android.support:appcompat-v7:25.2.0'
    compile 'com.android.support:support-v4:25.2.0'
    compile 'com.android.support:design:25.2.0'
    compile 'com.orhanobut:logger:1.15'
    compile 'com.github.angads25:filepicker:1.1.0'
    compile 'com.android.support:recyclerview-v7:25.2.0'
    compile 'com.android.support:cardview-v7:25.2.0'
    compile 'com.github.medyo:android-about-page:1.1.1'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.github.lecho:hellocharts-library:1.5.8@aar'

    testCompile 'junit:junit:4.12'
}

def getSelfDefinedVersion(type) {
    int aa = 1
    int bb = 1
    Process process = "git rev-list --count HEAD".execute()
    process.waitFor()
    int cccc = process.getText().toInteger()

    if ("code".equals(type)) {
        aa * 1000000 + bb * 10000 + cccc
        //main version code
    } else if ("name".equals(type)) {
        String today = new Date().format("yyMMdd")
        process = "git describe --always".execute()
        process.waitFor()
        String sha1 = process.getText().trim()
        "$aa.$bb.$cccc.$today.$sha1"
    }
}

def getGitBranch() {
    Process process = "git symbolic-ref --short HEAD".execute()
    process.waitFor()
    String brachname = process.getText().trim()
    brachname
}
